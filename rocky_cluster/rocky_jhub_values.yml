# custom can contain anything you want to pass to the hub pod, as all passed
# Helm template values will be made available there.
custom: {}

hub:
  revisionHistoryLimit:
  config:
    JupyterHub:
      admin_access: true
      #authenticator_class: generic-oauth
      authenticator_class: ldapauthenticator.LDAPAuthenticator
    ## Ref: https://github.com/jupyterhub/ldapauthenticator
    LDAPAuthenticator:
      # LDAPS conn info
      server_address: SET_IN_CLI 
      server_port: 636
      use_ssl: true 
      lookup_dn: true   
      user_search_base: 'cn=users,cn=accounts,dc=lab,dc=provenzawt,dc=dev'
      user_attribute: 'uid'
      lookup_dn_user_dn_attribute: 'username'
      lookup_dn_search_filter: '(&(objectClass=person)(uid={username}))' #'({login_attr}={login})'
      allowed_groups: 
      - "cn=grp-jhub-user,cn=groups,dc=acme,dc=com"
      - "cn=grp-jhub-admin,cn=groups,dc=acme,dc=com"
      admin_groups:
      - "cn=grp-jhub-admin,cn=groups,dc=acme,dc=com" 
      enable_auth_state: true
      # Bind account info
      lookup_dn_search_user: SET_IN_CLI #LDAP_BIND_UID         #when using the lookup_dn, some ldaps don't like anonymous binds
      lookup_dn_search_password: SET_IN_CLI #LDAP_BIND_PASSWD  #when using the lookup_dn, some ldaps don't like anonymous binds
    #GenericOAuthenticator:
      #client_id: JHub
      #client_secret: SET_IN_CLI #OAUTH_SECRET
      #oauth_callback_url: https://jhub.LAB_DOMAIN/hub/oauth_callback
      #authorize_url: https://OAUTH_SERVER_FQDN/auth/realms/Kubernetes/protocol/openid-connect/auth
      #token_url: https://OAUTH_SERVER_FQDN/auth/realms/Kubernetes/protocol/openid-connect/token
      #userdata_url: https://OAUTH_SERVER_FQDN/auth/realms/Kubernetes/protocol/openid-connect/userinfo
      #login_service: keycloak
      #manage_groups: true
      #username_key: preferred_username
      #enable_auth_state: true
      #userdata_params:
        #state: state
      #allowed_groups:
      #- grp-jhub-user
      #- grp-jhub-admin
      #admin_groups:
      #- grp-jhub-admin

  service:
    type: ClusterIP
    annotations: {}
    ports:
      nodePort:
    extraPorts: []
  db:
    type: sqlite-pvc
    upgrade:
    pvc:
      annotations: {}
      selector: {}
      accessModes:
        - ReadWriteOnce
      storage: 1Gi
      subPath:
      storageClassName:
    url:
    password:
  image:
    name: jupyterhub/k8s-hub
    tag: "2.0.0"
  # inject additional functionality into the hub
  #  Arbitrary extra python based configuration that should be in /usr/local/etc/jupyterhub/jupyterhub_config.py
  extraConfig: 
    import_custom: |
      import additional_functions as functs

      c.KubeSpawner.profile_list = functs.get_profiles
      c.KubeSpawner.pre_spawn_hook = functs.set_env
  extraFiles:
    profileList:
      mountPath: /usr/local/etc/jupyterhub/profiles.py
      stringData: SET_IN_CI

    profileSpawnerFunctions:
      mountPath: /usr/local/etc/jupyterhub/additional_functions.py
      stringData: SET_IN_CI
  networkPolicy:
    enabled: false
  serviceAccount:
    create: true

rbac:
  create: true

proxy:
  service:
    type: ClusterIP

# singleuser relates to the configuration of KubeSpawner which runs in the hub
# pod, and its spawning of user pods such as jupyter-myusername.
singleuser:
  networkTools:
    image:
      name: jupyterhub/k8s-network-tools
      tag: "2.0.0"
  cloudMetadata:
    blockWithIptables: false
  networkPolicy:
    enabled: true
  events: true
  extraLabels:
    hub.jupyter.org/network-access-hub: "true"
  allowPrivilegeEscalation: false
  storage:
    type: dynamic
    extraLabels: {}
    extraVolumes: []
    extraVolumeMounts: []
    static:
      pvcName:
      subPath: "{username}"
    capacity: 10Gi
    homeMountPath: /home/jovyan
    dynamic:
      storageClass: nfs-client
      pvcNameTemplate: claim-{username}{servername}
      volumeNameTemplate: volume-{username}{servername}
      storageAccessModes: [ReadWriteOnce]
  image:
    name: jupyter/scipy-notebook
    tag: "latest"
  startTimeout: 300
  cmd: jupyterhub-singleuser
  defaultUrl: "/lab"
  extraPodConfig: {}
  profileList: []

ingress:
  enabled: true
  annotations:
    cert-manager.io/cluster-issuer: "le-prod"
    traefik.ingress.kubernetes.io/router.entrypoints: websecure
    traefik.ingress.kubernetes.io/router.tls: "true"
    traefik.ingress.kubernetes.io/router.tls.domains.0.main: jhub.LAB_DOMAIN
  ingressClassName: "traefik"
  hosts:
  - jhub.LAB_DOMAIN
  pathSuffix:
  pathType: Prefix
  tls:
  - secretName: jhub-tls
    hosts:
    - jhub.LAB_DOMAIN

cull:
  timeout: 3600
debug:
  enabled: true
global:
  safeToShowValues: false

